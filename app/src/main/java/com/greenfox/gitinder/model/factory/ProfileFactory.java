package com.greenfox.gitinder.model.factory;

import com.greenfox.gitinder.model.Match;
import com.greenfox.gitinder.model.Profile;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ProfileFactory {

    public static Profile createProfile(){
        String username = getUsername();
        List<String> repos = getRepos();
        List<String> languages = getLanguages();
        List<String> snippets = getSnippets();
        String picUrl = getPicUri();

        return new Profile(username , picUrl, repos, languages, snippets);
    }

    private static List<String> getLanguages() {
        List<String> allLanguages = new ArrayList<>(Arrays.asList("APL", "AutoIt", "BASIC", "Eiffel", "Forth", "Frink", "Game Maker Language", "ICI", "J", "Lisp", "Lua", "Pascal",
         "PCASTL", "Perl", "PostScript", "Python", "REXX", "Ruby", "S-Lang", "Spin", "Charity", "Clean", "Curry", "Erlang", "F#", "Haskell", "Joy", "Kite", "ML", "Nemerle", "OPAL",
        "OPS5", "Q", "Ada", "ALGOL", "C", "C++", "C#", "CLEO", "COBOL", "Cobra", "D", "DASL", "DIBOL", "Fortran", "Java", "JOVIAL", "Objective-C", "SMALL", "Smalltalk", "Turing",
        "Visual Basic", "Visual FoxPro", "XL", "Bliss", "ChucK", "CLIST", "HyperTalk", "Modula-2", "Oberon", "Component Pascal", "MATLAB", "Occam", "PL/C", "PL/I", "Rapira", "RPG",
                "AppleScript", "Awk", "BeanShell", "ColdFusion", "F-Script", "JASS", "Mondrian", "PHP", "Revolution", "Tcl", "VBScript", "Windows PowerShell", "Curl", "SGML", "HTML",
                "XML", "XHTML", "ALF", "Fril", "Janus", "Leda", "Oz", "Poplog", "Prolog", "ROOP", "ABCL", "Afnix", "Cilk", "Concurrent Pascal", "E", "Joule", "Limbo", "Pict",
                "SALSA", "SR", "Agora", "BETA", "Cecil", "Lava", "Lisaac", "MOO", "Moto", "Object-Z", "Obliq", "Oxygene", "Pliant", "Prograph", "REBOL", "Scala", "Self", "Slate", "IO"));
        int nOfLang = (int) (Math.random()*5) + 1;
        int ranLang;
        List<String> toReturn = new ArrayList<>();
        for (int i = 0; i < nOfLang ; i++) {
            ranLang = (int) (Math.random()*allLanguages.size());
            toReturn.add(allLanguages.get(ranLang));
            allLanguages.remove(ranLang);
        }
        return toReturn;
    }
    private static List<String> getSnippets() {
        List<String> snipets = new ArrayList<>(Arrays.asList("//\n" +
                "// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 \n" +
                "// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \n" +
                "// Any modifications to this file will be lost upon recompilation of the source schema. \n" +
                "// Generated on: 2016.10.05 at 01:40:22 PM MDT \n" +
                "//\n" +
                "\n" +
                "\n" +
                "package org.ncgr.blast;\n" +
                "\n" +
                "import javax.xml.bind.annotation.XmlAccessType;\n" +
                "import javax.xml.bind.annotation.XmlAccessorType;\n" +
                "import javax.xml.bind.annotation.XmlElement;\n" +
                "import javax.xml.bind.annotation.XmlRootElement;\n" +
                "import javax.xml.bind.annotation.XmlType;\n" +
                "\n" +
                "\n" +
                "/**\n" +
                " * \n" +
                " */\n" +
                "@XmlAccessorType(XmlAccessType.FIELD)\n" +
                "@XmlType(name = \"\", propOrder = {\n" +
                "    \"blastOutputProgram\",\n" +
                "    \"blastOutputVersion\",\n" +
                "    \"blastOutputReference\",\n" +
                "    \"blastOutputDb\",\n" +
                "    \"blastOutputQueryID\",\n" +
                "    \"blastOutputQueryDef\",\n" +
                "    \"blastOutputQueryLen\",\n" +
                "    \"blastOutputQuerySeq\",\n" +
                "    \"blastOutputParam\",\n" +
                "    \"blastOutputIterations\",\n" +
                "    \"blastOutputMbstat\"\n" +
                "})\n" +
                "@XmlRootElement(name = \"BlastOutput\")\n" +
                "public class BlastOutput {\n" +
                "\n" +
                "    @XmlElement(name = \"BlastOutput_program\", required = true)\n" +
                "    protected String blastOutputProgram;\n" +
                "    @XmlElement(name = \"BlastOutput_version\", required = true)\n" +
                "    protected String blastOutputVersion;\n" +
                "    @XmlElement(name = \"BlastOutput_reference\", required = true)\n" +
                "    protected String blastOutputReference;\n" +
                "    @XmlElement(name = \"BlastOutput_db\", required = true)\n" +
                "    protected String blastOutputDb;\n" +
                "    @XmlElement(name = \"BlastOutput_query-ID\", required = true)\n" +
                "    protected String blastOutputQueryID;\n" +
                "    @XmlElement(name = \"BlastOutput_query-def\", required = true)\n" +
                "    protected String blastOutputQueryDef;\n" +
                "    @XmlElement(name = \"BlastOutput_query-len\", required = true)\n" +
                "    protected String blastOutputQueryLen;\n" +
                "    @XmlElement(name = \"BlastOutput_query-seq\")\n" +
                "    protected String blastOutputQuerySeq;\n" +
                "    @XmlElement(name = \"BlastOutput_param\", required = true)\n" +
                "    protected BlastOutputParam blastOutputParam;\n" +
                "    @XmlElement(name = \"BlastOutput_iterations\", required = true)\n" +
                "    protected BlastOutputIterations blastOutputIterations;\n" +
                "    @XmlElement(name = \"BlastOutput_mbstat\")\n" +
                "    protected BlastOutputMbstat blastOutputMbstat;\n" +
                "\n" +
                "    /**\n" +
                "     * Gets the value of the blastOutputProgram property.\n" +
                "     * \n" +
                "     * @return\n" +
                "     *     possible object is\n" +
                "     *     {@link String }\n" +
                "     *     \n" +
                "     */\n" +
                "    public String getBlastOutputProgram() {\n" +
                "        return blastOutputProgram;\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * Sets the value of the blastOutputProgram property.\n" +
                "     * \n" +
                "     * @param value\n" +
                "     *     allowed object is\n" +
                "     *     {@link String }\n" +
                "     *     \n" +
                "     */\n" +
                "    public void setBlastOutputProgram(String value) {\n" +
                "        this.blastOutputProgram = value;\n" +
                "    }\n",
                " /**\n" +
                "     * Gets the value of the blastOutputVersion property.\n" +
                "     * \n" +
                "     * @return\n" +
                "     *     possible object is\n" +
                "     *     {@link String }\n" +
                "     *     \n" +
                "     */\n" +
                "    public String getBlastOutputVersion() {\n" +
                "        return blastOutputVersion;\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * Sets the value of the blastOutputVersion property.\n" +
                "     * \n" +
                "     * @param value\n" +
                "     *     allowed object is\n" +
                "     *     {@link String }\n" +
                "     *     \n" +
                "     */\n" +
                "    public void setBlastOutputVersion(String value) {\n" +
                "        this.blastOutputVersion = value;\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * Gets the value of the blastOutputReference property.\n" +
                "     * \n" +
                "     * @return\n" +
                "     *     possible object is\n" +
                "     *     {@link String }\n" +
                "     *     \n" +
                "     */\n" +
                "    public String getBlastOutputReference() {\n" +
                "        return blastOutputReference;\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * Sets the value of the blastOutputReference property.\n" +
                "     * \n" +
                "     * @param value\n" +
                "     *     allowed object is\n" +
                "     *     {@link String }\n" +
                "     *     \n" +
                "     */\n" +
                "    public void setBlastOutputReference(String value) {\n" +
                "        this.blastOutputReference = value;\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * Gets the value of the blastOutputDb property.\n" +
                "     * \n" +
                "     * @return\n" +
                "     *     possible object is\n" +
                "     *     {@link String }\n" +
                "     *     \n" +
                "     */\n" +
                "    public String getBlastOutputDb() {\n" +
                "        return blastOutputDb;\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * Sets the value of the blastOutputDb property.\n" +
                "     * \n" +
                "     * @param value\n" +
                "     *     allowed object is\n" +
                "     *     {@link String }\n" +
                "     *     \n" +
                "     */\n" +
                "    public void setBlastOutputDb(String value) {\n" +
                "        this.blastOutputDb = value;\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * Gets the value of the blastOutputQueryID property.\n" +
                "     * \n" +
                "     * @return\n" +
                "     *     possible object is\n" +
                "     *     {@link String }\n" +
                "     *     \n" +
                "     */\n" +
                "    public String getBlastOutputQueryID() {\n" +
                "        return blastOutputQueryID;\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * Sets the value of the blastOutputQueryID property.\n" +
                "     * \n" +
                "     * @param value\n" +
                "     *     allowed object is\n" +
                "     *     {@link String }\n" +
                "     *     \n" +
                "     */\n" +
                "    public void setBlastOutputQueryID(String value) {\n" +
                "        this.blastOutputQueryID = value;\n" +
                "    }\n",
                "package org.ncgr.intermine;\n" +
                "\n" +
                "import java.io.IOException;\n" +
                "import java.util.Set;\n" +
                "import java.util.HashSet;\n" +
                "\n" +
                "import org.intermine.metadata.AttributeDescriptor;\n" +
                "import org.intermine.metadata.ClassDescriptor;\n" +
                "import org.intermine.metadata.CollectionDescriptor;\n" +
                "import org.intermine.metadata.ReferenceDescriptor;\n" +
                "import org.intermine.metadata.Model;\n" +
                "import org.intermine.webservice.client.core.ServiceFactory;\n" +
                "import org.intermine.webservice.client.services.QueryService;\n" +
                "\n" +
                "/**\n" +
                " * Query and view an InterMine model. Enter the IM service URL as a parameter.\n" +
                " * \n" +
                " * @author Sam Hokin\n" +
                " */\n" +
                "public class ModelViewer {\n" +
                "    \n" +
                "    /**\n" +
                "     * Perform the model query and print out the results.\n" +
                "     * @param args command line arguments\n" +
                "     * @throws IOException\n" +
                "     */\n" +
                "    public static void main(String[] args) throws IOException {\n" +
                "\n" +
                "        if (args.length!=1) {\n" +
                "            System.out.println(\"Usage: ModelViewer <intermine service URL>\");\n" +
                "            System.exit(0);\n" +
                "        }\n" +
                "\n" +
                "        String intermineServiceUrl = args[0];\n" +
                "        \n" +
                "        ServiceFactory factory = new ServiceFactory(intermineServiceUrl);\n" +
                "        Model model = factory.getModel();\n" +
                "\n" +
                "        Set<ClassDescriptor> classDescriptors = model.getClassDescriptors();\n" +
                "        for (ClassDescriptor cd : classDescriptors) {\n" +
                "\n" +
                "            String simpleName = cd.getSimpleName();\n" +
                "            Set<String> superclassNames = new HashSet<String>();\n" +
                "            for (ClassDescriptor superclassDescriptor : cd.getAllSuperDescriptors()) {\n" +
                "                String superclassName = superclassDescriptor.getSimpleName();\n" +
                "                if (!superclassName.equals(simpleName)) superclassNames.add(superclassName);\n" +
                "            }\n" +
                "\n" +
                "            System.out.println(\"----------------------------------------------------------------------------\");\n" +
                "            System.out.println(simpleName+\":\"+superclassNames);\n" +
                "\n" +
                "            Set<AttributeDescriptor> attributeDescriptors = cd.getAttributeDescriptors();\n" +
                "            Set<String> attrNames = new HashSet<String>();\n" +
                "            for (AttributeDescriptor attDescriptor : attributeDescriptors) {\n" +
                "                attrNames.add(attDescriptor.getName());\n" +
                "            }\n" +
                "            if (attrNames.size()>0) System.out.println(\"Attributes:\"+attrNames);\n" +
                "\n" +
                "            Set<ReferenceDescriptor> referenceDescriptors = cd.getReferenceDescriptors();\n" +
                "            Set<String> refNames = new HashSet<String>();\n" +
                "            for (ReferenceDescriptor refDescriptor : referenceDescriptors) {\n" +
                "                refNames.add(refDescriptor.getName());\n" +
                "            }\n" +
                "            if (refNames.size()>0) System.out.println(\"References:\"+refNames);\n" +
                "\n" +
                "            Set<CollectionDescriptor> collectionDescriptors = cd.getCollectionDescriptors();\n" +
                "            Set<String>collNames = new HashSet<String>();\n" +
                "            for (CollectionDescriptor collDescriptor : collectionDescriptors) {\n" +
                "                collNames.add(collDescriptor.getName());\n" +
                "            }\n" +
                "            if (collNames.size()>0) System.out.println(\"Collections:\"+collNames);\n" +
                "\n" +
                "        }\n" +
                "\n" +
                "    }\n" +
                "\n" +
                "}\n",
                "public class PubMedPublication {\n" +
                "\n" +
                "    PubMedSummary summary;\n" +
                "    Item publication;\n" +
                "    List<Item> authors;\n" +
                "\n" +
                "    /**\n" +
                "     * Construct from a DataConverter and PubMed ID.\n" +
                "     */\n" +
                "    public PubMedPublication(DataConverter converter, int pmid) throws IOException, UnsupportedEncodingException, ParserConfigurationException, SAXException {\n" +
                "        // get the summary\n" +
                "        summary = new PubMedSummary(pmid);\n" +
                "        if (summary.id!=0) {\n" +
                "            // create and populate the Publication Item\n" +
                "            publication = converter.createItem(\"Publication\");\n" +
                "            populateFromSummary(converter);\n" +
                "        }\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * Construct from a DataConverter and a PubMedSummary.\n" +
                "     */\n" +
                "    public PubMedPublication(DataConverter converter, PubMedSummary summary) {\n" +
                "        this.summary = summary;\n" +
                "        if (summary.id!=0) {\n" +
                "            // create and populate the Publication Item\n" +
                "            publication = converter.createItem(\"Publication\");\n" +
                "            populateFromSummary(converter);\n" +
                "        }\n" +
                "    }        \n" +
                "\n" +
                "    /**\n" +
                "     * Populate instance fields from the summary\n" +
                "     */\n" +
                "    void populateFromSummary(DataConverter converter) {\n" +
                "        // mandatory fields\n" +
                "        publication.setAttribute(\"title\", summary.title);\n" +
                "\tpublication.setAttribute(\"pubMedId\", String.valueOf(summary.id));\n" +
                "        publication.setAttribute(\"year\", String.valueOf(getYear(summary.pubDate)));\n" +
                "        publication.setAttribute(\"journal\", summary.source);\n" +
                "        // optional fields\n" +
                "        if (getMonth(summary.pubDate)!=null) publication.setAttribute(\"month\", getMonth(summary.pubDate));\n" +
                "        if (summary.pages!=null && summary.pages.length()>0) publication.setAttribute(\"pages\", summary.pages);\n" +
                "        if (summary.issue!=null && summary.issue.length()>0) publication.setAttribute(\"issue\", summary.issue);\n" +
                "        if (summary.lastAuthor!=null && summary.lastAuthor.length()>0) publication.setAttribute(\"lastAuthor\", summary.lastAuthor);\n" +
                "        if (summary.doi!=null && summary.doi.length()>0) publication.setAttribute(\"doi\", summary.doi);\n" +
                "        if (summary.volume!=null && summary.volume.length()>0) publication.setAttribute(\"volume\", summary.volume);\n" +
                "        if (summary.authorList!=null && summary.authorList.size()>0) publication.setAttribute(\"firstAuthor\", summary.authorList.get(0));\n" +
                "        // the list of Author Items\n" +
                "        authors = new LinkedList<Item>();\n" +
                "        for (String authorName : summary.authorList) {\n" +
                "            Item author = converter.createItem(\"Author\");\n" +
                "            author.setAttribute(\"name\", authorName);\n" +
                "            String[] parts = authorName.split(\" \");\n" +
                "            author.setAttribute(\"lastName\", parts[0]);\n" +
                "            author.setAttribute(\"initials\", parts[1]);\n" +
                "            authors.add(author);\n" +
                "        }\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * publication getter\n" +
                "     */\n" +
                "    public Item getPublication() {\n" +
                "        return publication;\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * authors getter\n" +
                "     */\n" +
                "    public List<Item> getAuthors() {\n" +
                "        return authors;\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * summary getter\n" +
                "     */\n" +
                "    public PubMedSummary getSummary() {\n" +
                "        return summary;\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * Parse the year from a string like \"2017 Mar\" or \"2017 Feb 3\"\n" +
                "     */\n" +
                "    static int getYear(String dateString) {\n" +
                "        String[] parts = dateString.split(\" \");\n" +
                "        return Integer.parseInt(parts[0]);\n" +
                "    }\n" +
                "\n" +
                "    /**\n" +
                "     * Parse the month from a string like \"2017 Mar\" or \"2017 Feb 3\"\n" +
                "     */\n" +
                "    static String getMonth(String dateString) {\n" +
                "        String[] parts = dateString.split(\" \");\n" +
                "        if (parts.length>1) {\n" +
                "            return parts[1];\n" +
                "        } else {\n" +
                "            return null;\n" +
                "        }\n" +
                "    }\n" +
                "\n" +
                "}",
        "        oper = new org.apache.axis.description.OperationDesc();\n" +
                "        oper.setName(\"destroy\");\n" +
                "        param = new org.apache.axis.description.ParameterDesc(new javax.xml.namespace.QName(\"http://nbcr.sdsc.edu/opal/types\", \"destroyInput\"), org.apache.axis.description.ParameterDesc.IN, new javax.xml.namespace.QName(\"http://www.w3.org/2001/XMLSchema\", \"string\"), java.lang.String.class, false, false);\n" +
                "        oper.addParameter(param);\n" +
                "        oper.setReturnType(new javax.xml.namespace.QName(\"http://nbcr.sdsc.edu/opal/types\", \"StatusOutputType\"));\n" +
                "        oper.setReturnClass(edu.sdsc.nbcr.opal.types.StatusOutputType.class);\n" +
                "        oper.setReturnQName(new javax.xml.namespace.QName(\"http://nbcr.sdsc.edu/opal/types\", \"destroyOutput\"));\n" +
                "        oper.setStyle(org.apache.axis.constants.Style.DOCUMENT);\n" +
                "        oper.setUse(org.apache.axis.constants.Use.LITERAL);\n" +
                "        oper.addFault(new org.apache.axis.description.FaultDesc(\n" +
                "                      new javax.xml.namespace.QName(\"http://nbcr.sdsc.edu/opal/types\", \"opalFaultOutput\"),\n" +
                "                      \"edu.sdsc.nbcr.opal.types.FaultType\",\n" +
                "                      new javax.xml.namespace.QName(\"http://nbcr.sdsc.edu/opal/types\", \"FaultType\"), \n" +
                "                      true\n" +
                "                     ));\n" +
                "        _operations[9] = oper;\n" +
                "\n" +
                "    }"));
        return snipets;
    }
    private static List<String> getRepos() {
        List<String> allRepos = new ArrayList<>(Arrays.asList("Operse", "loggrash", "jclocken", "drunlog", "simpling", "erlint", "Kickit", "esmyscrib", "sermine", "roomgraph"));
        int nOfRepo = (int) (Math.random()*5) + 1;
        int ranRepo;
        List<String> toReturn = new ArrayList<>();
        for (int i = 0; i < nOfRepo ; i++) {
            ranRepo = (int) (Math.random()*allRepos.size());
            toReturn.add(allRepos.get(ranRepo));
        }
        return toReturn;
    }
    private static String getPicUri() {
        List<String> allPictures = new ArrayList<>(Arrays.asList(
                "http://s1.1zoom.me/b6742/381/Sky_Night_Moon_Clouds_542827_600x800.jpg",
                "https://www.noao.edu/image_gallery/images/d4/conjuncionV-600.jpg",
                "https://upload.wikimedia.org/wikipedia/commons/4/4d/Paul_Schneider_Dickenschied_Kirche_600x800.jpg",
                "https://upload.wikimedia.org/wikipedia/commons/0/05/Lippstadt-Nicolaikirche-600x800-schwarzweiss-4.jpg",
                "http://noomoon.com/noomoonastro/AstroGallery/images/HorseHeadFlame.20040227.22X2Mins.10X2Mins.10X2Mins.16X2Mins.600X800.jpg",
                "http://ywwg.com/images/photos/072203-film/0009-ar.600x800.jpg",
                "https://mmsmady.files.wordpress.com/2012/02/ice-1-600x800.jpg",
                "http://alqabasdemo1.mawaqaatest.com/uploads/news/in_category/6228_eiffel_tower_at_night_600x800.jpg",
                "https://www.cestujsnadno.cz/wp-content/uploads/2018/11/burj-al-arab-690768_1920-600x800.jpg",
                "http://www.agrall.cz/gal/1385640072.jpg",
                "http://travelistan.sk/wp-content/uploads/2015/11/091-600x800.jpg",
                "http://primitivniumeni.cz/wp-content/uploads/2018/09/sosky-bulul-filipiny-portf4-600x800.jpg",
                "http://www.praha4.cz/image/ov/jcb31/tsk-cisteni-komunikaci-02.JPG",
                "http://www.showtheroom.com/wp-content/uploads/2018/06/Saty-Do-sve%CC%8Cta-600x800.jpg",
                "https://www.tynadraw.cz/user/documents/upload/BLOG%20OBR%C3%81ZKY/RipNDip-Lord-Nermal-T-Shirt_4-600x800.jpg",
                "http://www.jomagazin.cz/wp-content/uploads/2018/02/27848310_2084068738276460_631553093_n201-600x800.jpg",
                "https://www.logline.cz/ll/assets/images/josifkova-600x800.png"));
        int ranPic = (int) (Math.random()*allPictures.size());
        return allPictures.get(ranPic);
    }
    private static String getUsername() {
        List<String> allUsernames = new ArrayList<>(Arrays.asList("Danny", "Maara", "Splichus", "Aze", "Magda", "Matka", "Ondrej", "Fox", "Greenfox", "Jablko", "IloveJAVA",
                "Android123", "Destroyer99", "GitinderUser1", "MrHashtag", "TheKotlinLover", "SwiftIsMyLife"));
        int ranNick = (int) (Math.random()*allUsernames.size());
        return allUsernames.get(ranNick);
    }
}
